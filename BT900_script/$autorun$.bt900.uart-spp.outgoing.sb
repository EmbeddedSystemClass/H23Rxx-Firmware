// BitzOS (BOS) V0.1.4 - Copyright (C) 2017 Hexabitz
//	All rights reserved
//
//	File Name     : ProcessMsgBt900.sb
//	Description   : Source code for control and process message on BT900 module.
//
//
//******************************************************************************

//******************************************************************************
// Definitions
//******************************************************************************

// Set this to 0 to disable all debugging messages
#define ENABLE_DEBUG_PRINTS             1

// Led d2 - SIO12
#define LED_BTC_D2										  12

// UART
//#define UART_BAUDRATE                   (921600)
#define UART_BAUDRATE                   (115200)
#define UART_OPTION											"CN81H"
#define UART_RX_BUFFER                  (200)    //Depth of the UART Rx buffer
#define UART_TX_BUFFER                  (200)    //Depth of the UART Tx buffer

// define naming bluetooth that other device can see name of this module
#define BTC_FRIENDLY_NAME               "Hexabitz-H02Rx"

#define BTC_PIN                         "0000"
//#define BTC_ADDR                        "BCCFCC246FAA" // my android phone
//#define BTC_ADDR                        "ACBC329047BA" // my macbook pc
#define BTC_ADDR                        "001A7DDA7113" // my window pc


#define BTC_SET_DISCOVERABLE            0
#define BTC_SET_CONNECTABLE		0

//Max length message that can send to MCU
#define MAX_MESSAGE_SIZE                  50
// define code send command to MCU
#define CODE_H23R0_GET_INFO               200
#define CODE_H23R0_OTA_MODE               201
#define CODE_H23R0_RUN_MODE               202
#define CODE_H23R0_VSP_COMMAND_MODE       203
#define CODE_H23R0_VSP_BRIDGE_MODE        204
#define CODE_H23R0_SPP_MODE               205
#define CODE_H23R0_LED_STATUS_ON          206
#define CODE_H23R0_LED_STATUS_OFF         207
#define CODE_H23R0_BTC_DEL_ALL_DATA_SEG   208
#define CODE_H23R0_EVBTC_SPPCONN          209
#define CODE_H23R0_EVBTC_SPPDISCON        210
#define CODE_H23R0_EVBTC_PAIR_REQUEST     211
#define CODE_H23R0_EVBTC_PIN_REQUEST      212
#define CODE_H23R0_EVBTC_PAIR_RESULT      213
#define CODE_H23R0_EVBTC_AUTHREQ          214
#define CODE_H23R0_EVBTC_PASSKEY          215
#define CODE_H23R0_SHOW_DEBUG_INFO        216


//******************************************************************************
// Library Import
//******************************************************************************

//******************************************************************************
// Global Variable Declarations
//******************************************************************************

DIM rc
// led's variable
DIM valueLedBt : valueLedBt = 0
DIM numberBlinkLed : numberBlinkLed = 0
DIM delayMsLedBt : delayMsLedBt = 0
DIM periodMsLedBt : periodMsLedBt = 0

DIM StreamUartHandle
DIM StreamSPPHandle
DIM SPPHandleConnection
DIM StreamBridgeHandle

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//------------------------------------------------------------------------------
// Delay functions
//------------------------------------------------------------------------------
SUB Delay_S(t as integer)
  DIM tm
  t = t*1000
  tm = GetTickCount()
  WHILE (GetTickCount()-tm) < t
    //Wait for t*1000 milliseconds
  ENDWHILE
ENDSUB

SUB Delay_MS(t as integer)
  DIM tm
  tm = GetTickCount()
  WHILE (GetTickCount()-tm) < t
    //Wait for t milliseconds
  ENDWHILE
ENDSUB

//------------------------------------------------------------------------------
// This function is called to send message format from Bluetooth module to MCU
//------------------------------------------------------------------------------
SUB SendFrameMsgToMcu(parameters$)
  DIM startFrame$ : startFrame$ = "|"
  DIM endCode$ : endCode$ = "~"
  DIM lenEmptyStr, index

  lenEmptyStr = StrLen(parameters$)

  // send start frame message
  PRINT startFrame$
  Delay_MS(2) // delay 2ms

  // send data
  PRINT parameters$

  // send empty character
  FOR index = lenEmptyStr TO (MAX_MESSAGE_SIZE - 2)
    PRINT "\t"
  NEXT

  // send end code
  PRINT endCode$

ENDSUB

SUB SendMsgInfoToMcu(code, parameter$)
  DIM lenStr, _lenStr$
  DIM strCommand$
  DIM _strCode$

  lenStr = StrLen(parameter$) + 3 + 2
  SPRINT #_strCode$ , code
  SPRINT #_lenStr$ , lenStr
  strCommand$ = _lenStr$ + _strCode$ + parameter$

  // send command string
  SendFrameMsgToMcu(strCommand$)
ENDSUB

//------------------------------------------------------------------------------
// Blink led on the bluetooth Laird module (BT900/BT800)
//------------------------------------------------------------------------------
SUB BlinkLed(number, delayTimeMs)
  DIM i
  DIM statusLed : statusLed = 0

  GpioWrite(LED_BTC_D2, 0)  // turns D2 led off
  FOR i = 0 TO number
    IF 0 == statusLed THEN
      statusLed = 1
    ELSE
      statusLed = 0
    ENDIF
    GpioWrite(LED_BTC_D2, statusLed)
    Delay_MS(delayTimeMs)
  NEXT
  GpioWrite(LED_BTC_D2, 0)  // turns D2 led off
  statusLed = 0
ENDSUB

//------------------------------------------------------------------------------
// Register Error Handler as early as possible
//------------------------------------------------------------------------------
SUB HandlerOnErr()
  IF (ENABLE_DEBUG_PRINTS!=0) THEN
    PRINT "\n OnErr - ";GetLastError();"\n" //Need to define frame msg error
  ENDIF
ENDSUB
ONERROR NEXT HandlerOnErr

//------------------------------------------------------------------------------
// For debugging to send a message to STM chips for processing error
// --- rc = result code
// --- ln = code error
//------------------------------------------------------------------------------
SUB AssertRC(rc,ln)
    IF ((0 != rc) && (0 != ENABLE_DEBUG_PRINTS)) THEN
        //PRINT ln$
    ENDIF
ENDSUB

//------------------------------------------------------------------------------
// Initialise and instantiate service, characteristic, start adverts
//------------------------------------------------------------------------------
SUB OnStartup()
  DIM strTempNameBt$
  DIM tempBtcAddr$

  // Setting D2 LED pin on the BT900
  rc = GpioSetFunc(LED_BTC_D2, 2, 0) // DIGITAL_OUT; Initial output to LOW
  AssertRC(rc, 2)

  // Set friendly name
  strTempNameBt$ = BTC_FRIENDLY_NAME
  rc = BtcSetFriendlyName(strTempNameBt$)
  AssertRC(rc, 3)

  // Configure discoverability mode
  rc = BtcDiscoveryConfig(0, 0)  // Discoverability type: General
  AssertRC(rc, 4)

  // Set discoverable
  rc = BtcSetDiscoverable(BTC_SET_DISCOVERABLE, 180)
  AssertRC(rc, 5)

  // Set connectable so other devices can connect to this device
  rc = BtcSetConnectable(BTC_SET_CONNECTABLE) // Connectable
  AssertRC(rc, 6)

  // Set pairable
  rc = BtcSetPairable(1)  // Not pairable
  AssertRC(rc, 7)

  // Pairing information is stored in the bonding manager
  rc = BtcSavePairings(1)
  AssertRC(rc, 8)

  // Set inquiry
  //rc = BtcInquiryConfig(0, 0)   // Inquiry Type: General Inquiry
  //AssertRC(rc, 9)
  //rc = BtcInquiryConfig(1, 2)   // Inquiry Mode: Extended
  //AssertRC(rc, 10)
  //rc = BtcInquiryConfig(2, 100) // Max number of inquiry responses to receive
  //AssertRC(rc, 11)

  // Start inquiry
  //rc = BtcInquiryStart(10) // time out in seconds
  //AssertRC(rc, 12)

  //tempBtcAddr$ = BTC_ADDR
  //rc = BtcPair(tempBtcAddr$, 2)
  //AssertRC(rc, 13)

  // Set friendly name
  strTempNameBt$ = BTC_FRIENDLY_NAME
  rc = BtcSetFriendlyName(strTempNameBt$)
  AssertRC(rc, 14)

  // setting UART
  rc = UartOpen(UART_BAUDRATE, 0, 0, "CN81H")
  AssertRC(rc, 15)

  // set SPP
  rc = BtcSppOpen(SPPHandleConnection)
  AssertRC(rc, 16)

ENDSUB

//------------------------------------------------------------------------------
// Close connections so that we can run another app without problems
//------------------------------------------------------------------------------
SUB CloseConnections()
ENDSUB

FUNCTION HandlerInqResp(respType)
ENDFUNC 1

FUNCTION BtcTimeOutHeadler()
  BlinkLed(10, 250) // number of blink: 10; time delay: 250
ENDFUNC 1

FUNCTION HandlerPairReq()
  DIM tempBtcAddr$

  rc = BtcGetPAIRRequestBDAddr(tempBtcAddr$)
  IF 0 == rc THEN
    rc = BtcSendPairResp(1)
  ENDIF

ENDFUNC 1

FUNCTION HandlerPINReq()
  DIM tempBtcAddr$
  DIM tempBtcPin$

  tempBtcAddr$ = BTC_ADDR
  tempBtcPin$ = BTC_PIN
  rc = BtcGetPinRequestBDAddr(tempBtcAddr$)
  rc = BtcSendPinResp(tempBtcPin$)
ENDFUNC 1

FUNCTION HandlerPairRes(nRes)
  IF (0 == nRes) THEN
    BlinkLed(10, 250) // number of blink: 10; time delay: 250
  ELSE
    BlinkLed(10, 250) // number of blink: 10; time delay: 250
  ENDIF
ENDFUNC 1

FUNCTION SppConnect(headle, result)
  SPPHandleConnection = headle
  // Bridge to UART
  rc = StreamGetUartHandle(StreamUartHandle)
  rc = StreamGetSPPHandle(SPPHandleConnection, StreamSPPHandle)
  rc = StreamBridge(StreamUartHandle, StreamSPPHandle, StreamBridgeHandle)
ENDFUNC 1

FUNCTION HandlerSppDataRx()
ENDFUNC 1

FUNCTION HandlerUartRx()
ENDFUNC 1

//******************************************************************************
// Equivalent to main() in C
//******************************************************************************

ONEVENT EVINQRESP               CALL HandlerInqResp
ONEVENT EVBTC_INQUIRY_TIMEOUT   CALL BtcTimeOutHeadler
ONEVENT EVBTC_PAIR_REQUEST      CALL HandlerPairReq
ONEVENT EVBTC_PIN_REQUEST       CALL HandlerPINReq
ONEVENT EVBTC_PAIR_RESULT       CALL HandlerPairRes
ONEVENT EVSPPCONN               CALL SppConnect
ONEVENT EVUARTRX                CALL HandlerUartRx
ONEVENT EVBTC_SPP_DATA_RECEIVED CALL HandlerSppDataRx


OnStartup()
IF 0 == rc THEN
  BlinkLed(1, 500)
ELSE
  BlinkLed(2, 500)
ENDIF

//------------------------------------------------------------------------------
// Wait for a synchronous event.
// An application can have multiple <WaitEvent> statements
//------------------------------------------------------------------------------
WAITEVENT

CloseConnections()

